[
    {
        // ctrl + shift + Ã„
        "key": "ctrl+shift+oem_7",
        "command": "editor.emmet.action.balanceOut"
    },
    // VIM STUFF
    // when VIM is active
    {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && !editorTabMovesFocus && neovim.mode != insert"
    },
    {
        "key": "shift+tab",
        "command": "outdent",
        "when": "editorTextFocus && !editorTabMovesFocus && neovim.mode != insert"
    },
    // VSCode remap
    {
        "key": "alt+ctrl+k",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+ctrl+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+ctrl+j",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+ctrl+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+j",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+k",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    // Move betweeen editor tabs
    {
        "key": "alt+k",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "alt+e",
        "command": "workbench.view.explorer"
    },
    // Autosuggestion
    // Easy navigation in suggestion/intellisense
    {
        "key": "alt+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+l",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    // Easy navigation in quick open/QuickPick
    {
        "key": "alt+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.acceptSelectedQuickOpenItem",
        "when": "inQuickOpen"
    },
    // Ctrl + d multiselect remap
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    // Terminal Navigation
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    // Easy navigation in parameter hint (i.e. traverse the hints when there's multiple overload for one method)
    {
        "key": "alt+j",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+k",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    // Easy navigation in code action
    {
        "key": "alt+j",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "alt+k",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "alt+l",
        "command": "acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    // Explorer
    {
        "key": "enter",
        "command": "list.select",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "l",
        "command": "list.select",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "o",
        "command": "list.toggleExpand",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "h",
        "command": "list.collapse",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift+a",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    // Neovim extension
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send"
    },
    {
        "key": "ctrl+f",
        "command": "-vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+b",
        "command": "-vscode-neovim.ctrl-b",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl-d",
        "command": "-vscode-neovim.ctrl-d",
        "when": "editorTextFocus && neovim.init && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "command": "vscode-neovim.send",
        // the key sequence to activate the binding
        "key": "ctrl+d",
        // don't activate during insert mode
        "when": "editorTextFocus && neovim.mode != insert",
        // the input to send to Neovim
        "args": "<C-d>zz"
    },
    {
        "command": "vscode-neovim.send",
        // the key sequence to activate the binding
        "key": "ctrl+u",
        // don't activate during insert mode
        "when": "editorTextFocus && neovim.mode != insert",
        // the input to send to Neovim
        "args": "<C-u>zz"
    }
]
